#!/bin/sh
#
# Copyright (C) 2014 OpenMediaVault Plugin Developers
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

SERVICE_XPATH="/config/services/pxe"
SERVICE_XPATH_ENTRY="${SERVICE_XPATH}/entries/entry"

PXE_SHARED_FOLDER_REF=$(omv_config_get "${SERVICE_XPATH}/sharedfolderref")
PXE_PATH=$(omv_get_sharedfolder_path "${PXE_SHARED_FOLDER_REF}")
PXE_CONFIG_PATH="${PXE_PATH}/pxelinux.cfg"
PXE_CONFIG="${PXE_CONFIG_PATH}/default"

command=`echo $2 | cut -d \  -f 1`
package=`echo $2 | cut -d \  -f 2`

syslinux_version() {
	[ -f "/usr/share/syslinux/version" ] && cat /usr/share/syslinux/version | awk -F" " '{print $1}' 2>/dev/null
}

syslinux_path() {
	if [ -z "$(syslinux_version)" ]; then
		echo "/usr/lib/syslinux"
	else
		echo "/usr/share/syslinux"
	fi
}

syslinux() {
	[ -f /tmp/syslinux.install ] && [ -d /proc/`cat /tmp/syslinux.install` ] && ( 
		(sleep 20 && rm -f /tmp/syslinux.install) &
		PID=$!; while sleep 2; do [ ! -f /tmp/syslinux.install ] && (kill -p ${PID}; break); done)
		
	local VERSION=$(wget -O - http://UniverseNAS.0rca.ch/sources/pxe-syslinux | head -n 1)
	if [ -z "${VERSION}" ]; then
		# should be installed already
		apt-get -qqy install syslinux-common
	else
		if [ ! -f "/usr/share/syslinux/version" ] || [ "$(cat /usr/share/syslinux/version | awk -F' ' '{print $1}')" != "${VERSION}" ]; then
			
			# should be installed already
			apt-get -qqy install uuid-dev nasm
			
			local TMP=$(mktemp -d -t syslinux.XXXXXXXXXX)
			wget -O ${TMP}/syslinux-${VERSION}.tar.gz http://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-${VERSION}.tar.gz

			SHASUM=$(wget -q -O - http://www.kernel.org/pub/linux/utils/boot/syslinux/sha256sums.asc | grep -F "syslinux-${VERSION}.tar.gz" | head -n 1 | awk -F " " '{print $1}')
			[ "$(sha256sum ${TMP}/syslinux-${VERSION}.tar.gz)" != "${SHASUM}" ] && exit 1
			
			echo "$$" >/tmp/syslinux.install
			
			tar -xzf ${TMP}/syslinux-${VERSION}.tar.gz -C ${TMP}
			(cd ${TMP}/syslinux-6.03 && make install && cp -f ${TMP}/syslinux-6.03/version /usr/share/syslinux/version) 2>/dev/null
			
			rm -f /tmp/syslinux.install
		fi
		
	fi
	
	echo "SYSLINUX VERSION $(syslinux_version)"
}

update()
{
    mkdir -p "${PXE_CONFIG_PATH}"
    enablewinpath=$(omv_config_get "${SERVICE_XPATH}/enableWinPath")

    if [ "${enablewinpath}" = "1" ]; then
        cat <<EOF > /etc/tftp_remap.conf
rg \\ /
EOF
    elif [ -e "/etc/tftp_remap.conf" ]; then
        rm /etc/tftp_remap.conf
    fi
    invoke-rc.d tftpd-hpa restart

	syslinux
    cp -f `syslinux_path`/vesamenu.c32 "${PXE_PATH}"
    cp -f `syslinux_path`/pxelinux.0 "${PXE_PATH}"

    rm -f ${PXE_CONFIG}.*

    timeout="$(omv_config_get "${SERVICE_XPATH}/timeout")"

    cat <<EOF > "${PXE_CONFIG}"
DEFAULT vesamenu.c32
TIMEOUT 100
# TIMEOUT ${timeout}
PROMPT 0

MENU TITLE PXE Boot System

LABEL Local HDD
LOCALBOOT 0
EOF

    #Loop through entries and output them into the config file
    count=$(omv_config_get_count "${SERVICE_XPATH_ENTRY}");
    index=1;
    while [ ${index} -le ${count} ]; do    
        enable="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/enable")"
        group="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/group")"
        label="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/label")"
        menu="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/menu")"
        kernel="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/kernel")"
        append="$(omv_config_get "${SERVICE_XPATH_ENTRY}[position()=${index}]/append")"

        if [ "${enable}" != "0" ]; then
            if [ "${group}" != "Default" ]; then
                cat <<EOF >> "$PXE_CONFIG"

LABEL ${group}
 KERNEL vesamenu.c32
 APPEND pxelinux.cfg/default.${group}
EOF
                if [ ! -e "${PXE_CONFIG}.${group}" ]; then
                    cat <<EOF > "${PXE_CONFIG}.${group}"
MENU TITLE PXE Boot System

LABEL Main Menu
 KERNEL vesamenu.c32
 APPEND pxelinux.cfg/default
EOF
                fi
                cat <<EOF >> "${PXE_CONFIG}.${group}"

LABEL ${label}
 MENU ${menu}
 KERNEL ${kernel}
 APPEND ${append}
EOF
                
            else
                cat <<EOF >> "${PXE_CONFIG}"

LABEL ${label}
 MENU ${menu}
 KERNEL ${kernel}
 APPEND ${append}
EOF
            fi
        fi

        index=$(( ${index} + 1 ))
    done;
}

package()
{
    export LANG=C

    templocation="/tmp/pxeinstall"

    # make temp directory
    rm -Rf ${templocation}
	mkdir -p "${templocation}/pxe"

	package_url="${package}"
	package=$(basename "${package}")

    # download package
    wget ${package_url} -O "${templocation}/${package}"

    # Check to see if downloaded package exists
    if [ ! -f "${templocation}/${package}" ]; then
        echo "${package} was not downloaded."
        exit 1
    fi

    # unzip package
    tar xvzf "${templocation}/${package}" -C "${templocation}/pxe"

	if [ -f "${templocation}/pxe/config.sh" ]; then
		(cd ${templocation}/pxe && /bin/bash ${templocation}/pxe/config.sh)
	fi

    # put config.txt in temp directory
    mv -f "${templocation}/pxe/config.txt" "${templocation}"

	cp -Rf ${templocation}/pxe/* ${PXE_PATH}/

    # remove downloaded package file
    rm -Rf "${templocation}"
}

case ${command} in
    package)
        echo "Installing $package ..."
        package
    ;;

	syslinux)
	    echo "Installing syslinux ..."
	    syslinux
	;;

    *)
        echo "Updating ..."
        update
    ;;
esac

exit 0
